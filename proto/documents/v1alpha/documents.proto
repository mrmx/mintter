syntax = "proto3";

package com.mintter.documents.v1alpha;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option go_package = "mintter/backend/genproto/documents/v1alpha;documents";

// === Draft Service ===

// Drafts service exposes the functionality
service Drafts {
  // Creates a new draft with a new permanent document ID.
  rpc CreateDraft(CreateDraftRequest) returns (Document);

  // Deletes a draft by its document ID.
  rpc DeleteDraft(DeleteDraftRequest) returns (google.protobuf.Empty);

  // Gets a single draft if exists.
  rpc GetDraft(GetDraftRequest) returns (Document);

  // Updates a draft using granular update operations.
  rpc UpdateDraftV2(UpdateDraftRequestV2) returns (google.protobuf.Empty);

  // List currently stored drafts.
  rpc ListDrafts(ListDraftsRequest) returns (ListDraftsResponse);

  // Publishes a draft. I.e. draft will become a publication, and will no longer appear in drafts section.
  rpc PublishDraft(PublishDraftRequest) returns (Publication);
}

// Request to create a new draft.
message CreateDraftRequest {
  // Optional. Existing Document ID can be specified to update
  // previously published document. A draft will be created
  // with the content of the most recent known version.
  string existing_document_id = 1;
}

// Request to delete an existing draft.
message DeleteDraftRequest {
  // ID of the document whose draft needs to be deleted. Only one
  string document_id = 1;
}

// Request to get a single draft.
message GetDraftRequest {
  // ID of the document for which draft was previously created.
  string document_id = 1;
}

// Request to update an existing draft using granular operations.
message UpdateDraftRequestV2 {
  // ID of the document to be updated.
  string document_id = 3;

  // List of document changes that must be applied to the existing document.
  repeated DocumentChange changes = 4;
}

// Granular document change.
message DocumentChange {
  // Operation to move an existing block to a different place in the document.
  // Move and Create operations are both expressed with this.
  // Conceptually new blocks are moved out of nowhere into the document.
  message MoveBlock {
    // ID of the block to move.
    string block_id = 1;

    // ID of the new parent for the block being moved.
    string parent = 2;

    // ID of the new left sibling for the block being moved.
    string left_sibling = 3;
  }

  oneof op {
    // New title to set on the document.
    string set_title = 1;

    // New subtitle to set on the document.
    string set_subtitle = 2;

    // Move operation that creates/moves a block within the document hierarchy.
    MoveBlock move_block = 3;

    // New block state that replaces an existing block.
    Block replace_block = 4;

    // ID of a block to delete.
    string delete_block = 5;
  }
}

// Request to list stored drafts.
message ListDraftsRequest {
  // Optional. Number of results per page.
  int32 page_size = 1;

  // Optional. Token for the page to return.
  string page_token = 2;
}

// Response for listing drafts.
message ListDraftsResponse {
  // Drafts matching the list request.
  // Content is omitted.
  repeated Document documents = 1;

  // Token for the next page if there're any.
  string next_page_token = 2;
}

// Request to publish a draft.
message PublishDraftRequest {
  // ID of the document which current draft needs to be published.
  string document_id = 1;
}

// === Publication Service ===

// Publications service provides access to published documents.
service Publications {
  // Gets a single publication.
  rpc GetPublication(GetPublicationRequest) returns (Publication);

  // Deletes a publication from the local node. It removes all the patches corresponding to a document.
  rpc DeletePublication(DeletePublicationRequest) returns (google.protobuf.Empty);

  // Lists stored publications. Only the most recent versions show up.
  rpc ListPublications(ListPublicationsRequest) returns (ListPublicationsResponse);
}

// Request for getting a single publication.
message GetPublicationRequest {
  // Required. ID of the published document.
  string document_id = 1;

  // Optional. Specific version of the published document. If empty, the latest one is returned.
  string version = 2;

  // Optional. If true, only local publications will be found. False by default.
  bool local_only = 3;
}

// Request for deleting a publication.
message DeletePublicationRequest {
  // Document ID of the publication to be removed.
  // All versions will also be removed.
  string document_id = 1;
}

// Request for listing publications.
message ListPublicationsRequest {
  // Optional. Number of results per page. Default is defined by the server.
  int32 page_size = 1;

  // Optional. Value from next_page_token obtains from a previous response.
  string page_token = 2;
}

// Response with list of publications.
message ListPublicationsResponse {
  // List of publications matching the request.
  // Only most recent versions are returned.
  // Content is omitted, only metadata is present.
  repeated Publication publications = 1;

  // Token for the next page if there're more results.
  string next_page_token = 2;
}

// === Content Graph Service ===

// Content graph service provides access to citations (backlinks).
service ContentGraph {
  rpc ListCitations(ListCitationsRequest) returns (ListCitationsResponse);
}

message ListCitationsRequest {
  // Required. Document ID for which citations need to be retrieved.
  string document_id = 1;

  // Optional. Depth can be used to request transitive closure of citations.
  // For example depth=1 will return not only citations of the requested document_id
  // but also citations of those direct citations. The default is depth=0 and will only
  // return direct citations.
  int32 depth = 2;
}

// Response with citations.
message ListCitationsResponse {
  // List of links that point to the requested document, recursively, according to the requested depth.
  repeated Link links = 1;
}

// === Types ===

// State of the document after publication.
message Publication {
  // Version points to the state of the publication at some point in time.
  // It is represented as a string, although it can be a list of CIDs.
  // The order of hashes must be deterministic, which is tricky because
  // CIDs can have different base encoding when represented as a string.
  // So same hash, can have different string representations.
  // We should either define a canonical base encoding, or sort binary
  // representation of the hash portion of the CID.
  // Anyway, all these details should be opaque for consumers of this API.
  // On the other hand, if API consumers never compare versions as plain strings
  // it doesn't really matter if different version strings point to the same document.
  string version = 1;

  // Document metadata.
  Document document = 2;
}

// Document represents metadata and content of a draft or publication.
message Document {
  // Permanent ID of the document.
  string id = 1;

  // Title of the document.
  string title = 2;

  // Subtitle of the document.
  string subtitle = 3;

  // Output only. Author of the document.
  string author = 4;

  // This is WIP feature for block-aware API. It will supersede the `content` field.
  repeated BlockNode children = 9;

  // Output only. Time when document was created.
  google.protobuf.Timestamp create_time = 6;

  // Output only. Time when document was updated.
  google.protobuf.Timestamp update_time = 7;

  // Output only. Time when this version was published. Not present in drafts.
  google.protobuf.Timestamp publish_time = 8;
}

// Content block with children.
message BlockNode {
  // Content block.
  Block block = 1;

  // Child blocks.
  repeated BlockNode children = 2;
}

// Content block.
message Block {
  // Block ID. Must be unique within the document.
  string id = 1;

  // Type of the block. Specific to the renderer.
  string type = 2;

  // Text of the content block.
  string text = 3;

  // Arbitrary attributes of the block.
  map<string, string> attributes = 4;

  // Annotation "layers" of the block.
  repeated Annotation annotations = 5;
}

// Conceptual annotation "layer" that is applied to arbitrary spans of block text.
// An "identity" of the layer should be derived deterministically based on its type
// attributes. Spans inside the same annotation can't overlap.
//
// Spans are stored inside the Annotation in a "columnar" format,
// i.e. StructureOfArrays instead of ArrayOfStructures. See: https://en.wikipedia.org/wiki/AoS_and_SoA.
// This is useful to reduce the number of allocations and offers more compact serialization, because
// protobuf is able to "pack" primitive repeated fields more efficiently.
message Annotation {
  // Type of the annotation.
  string type = 1;

  // Arbitrary key-value attributes of the annotation.
  map<string, string> attributes = 2;

  // Start offsets of possibly disjoint spans of text for which this annotation is applied.
  // Must be sorted and have the same number of items as `ends` list.
  repeated int32 starts = 3;

  // End offsets of possibly disjoint spans of text for which this annotation is applied.
  // Must be sorted and have the same number of items as `starts` list.
  repeated int32 ends = 4;
}

// Description of a link inside a document.
message Link {
  // Required. Describes where link originates from.
  LinkNode source = 1;

  // Required. Describes where link points to.
  // Here the block_id is optional, because the whole document can be linked.
  LinkNode target = 2;
}

// Describes "sides" of a Link.
message LinkNode {
  // ID of the document on one side of a Link.
  string document_id = 1;

  // Version of the document.
  string version = 2;

  // ID of the block inside the document.
  string block_id = 3;
}

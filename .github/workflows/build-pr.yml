name: Build PR

on:
  pull_request:
    types: [labeled]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: us-east-1

jobs:
  get-version:
    runs-on: ubuntu-latest
    if: ${{ github.event.label.name == 'build-artifacts' }}
    outputs:
      version: ${{ steps.current_time.outputs.formattedTime }}
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸ¤– Your build has started. I will notify you when the artifacts are ready.'
            })

            github.rest.issues.removeLabel({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'build-artifacts',
            })
      - name: Get current time
        uses: srfrnk/current-time@master
        id: current_time
        with:
          format: YY.M.D

  build-binaries:
    runs-on: ${{ matrix.config.os }}
    timeout-minutes: 40
    needs: get-version
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: ubuntu-latest
            goarch: amd64
            rust_target: x86_64-unknown-linux-gnu
          - os: macos-latest
            goarch: amd64
            rust_target: x86_64-apple-darwin
          - os: macos-latest
            goarch: arm64
            rust_target: aarch64-apple-darwin
          - os: windows-latest
            goarch: amd64
            rust_target: x86_64-pc-windows-msvc
          # - os: windows-latest
          #   goarch: arm64
          #   rust_target: aarch64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}

      - name: 'Setup Rust'
        uses: actions-rs/toolchain@v1
        with:
          default: true
          override: true
          profile: minimal
          toolchain: stable
          target: ${{ matrix.config.rust_target }}

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.config.rust_target }}

      - name: 'Setup Go'
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 19
          cache: "yarn"

      - name: Install Dependencies
        run: |
          yarn set version latest
           yarn install --immutable

      - name: 'Install native packages'
        if: "matrix.config.os == 'ubuntu-latest'"
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libayatana-appindicator3-dev librsvg2-dev patchelf

      - uses: actions/cache@v3
        if: "matrix.config.os == 'ubuntu-latest'"
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - uses: actions/cache@v3
        if: "matrix.config.os == 'macos-latest'"
        with:
          path: |
            ~/Library/Caches/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - uses: actions/cache@v3
        if: "matrix.config.os == 'windows-latest'"
        with:
          path: |
            ~\AppData\Local\go-build
            ~\go\pkg\mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build Backend (Unix)
        if: "matrix.config.os != 'windows-latest'"
        run: |
          mkdir -p plz-out/bin/backend
          go build -o plz-out/bin/backend/mintterd-${{ matrix.config.rust_target }} ./backend/cmd/mintterd
        env:
          GOARCH: ${{ matrix.config.goarch }}
          CGO_ENABLED: 1

      - name: Build Backend (Windows)
        if: "matrix.config.os == 'windows-latest'"
        run: |
          mkdir -p plz-out/bin/backend
          go build -o plz-out/bin/backend/mintterd-${{ matrix.config.rust_target }}.exe ./backend/cmd/mintterd
        env:
          GOARCH: ${{ matrix.config.goarch }}
          CGO_ENABLED: 1

      - name: create apple private key file
        if: "matrix.config.os == 'macos-latest'"
        run: |
          mkdir ./desktop/app/private_keys
          echo "$APPLE_API_PRIVKEY" > ./desktop/app/private_keys/AuthKey_$APPLE_API_KEY.p8
        env:
          APPLE_API_PRIVKEY: '${{ secrets.APPLE_API_PRIVKEY }}'
          APPLE_API_KEY: '${{ secrets.APPLE_API_KEY }}'

      - name: create AppImage private key file
        if: "matrix.config.os == 'ubuntu-latest'"
        run: |
          export GPG_TTY=$(tty)
          echo "$APPIMAGE_SIGN_PRIVKEY" | gpg --batch --import
        env:
          APPIMAGE_SIGN_PRIVKEY: '${{ secrets.APPIMAGE_SIGN_PRIVKEY }}'

      - name: Set version in Cargo.toml
        run:
          node scripts/update-cargo-toml.mjs ./desktop/app/Cargo.toml ${{
          needs.get-version.outputs.version }}

      - uses: JonasKruckenberg/tauri-build@v1.2.2
        id: tauri_build
        env:
          VERSION: ${{ needs.get-version.outputs.version }}
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          ENABLE_CODE_SIGNING: '${{ secrets.APPLE_CERTIFICATE }}'
          APPLE_API_ISSUER: '${{ secrets.APPLE_API_ISSUER }}'
          APPLE_API_KEY: '${{ secrets.APPLE_API_KEY }}'
          APPLE_CERTIFICATE: '${{ secrets.APPLE_CERTIFICATE }}'
          APPLE_CERTIFICATE_PASSWORD:
            '${{ secrets.APPLE_CERTIFICATE_PASSWORD }}'
          APPLE_SIGNING_IDENTITY: '${{ secrets.APPLE_SIGNING_IDENTITY }}'
          TAURI_KEY_PASSWORD: '${{ secrets.TAURI_KEY_PASSWORD }}'
          TAURI_PRIVATE_KEY: '${{ secrets.TAURI_PRIVATE_KEY }}'
          SIGN: '1'
          SIGN_KEY: '${{ secrets.APPIMAGE_SIGN_KEYID }}'
          APPIMAGETOOL_SIGN_PASSPHRASE:
            '${{ secrets.APPIMAGE_SIGN_PASSPHRASE }}'
        with:
          configPath: nightly.tauri.conf.json
          projectPath: ./desktop/app
          target: ${{ matrix.config.rust_target }}
          debug: true
          args: --verbose

      - uses: actions/upload-artifact@v3
        with:
          name: artifacts-${{ matrix.config.rust_target }}
          path:
            "${{ join(fromJSON(steps.tauri_build.outputs.artifacts), '\n') }}"

      - name:
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸ¤–ðŸš¨ Build failed. You can find the logs here ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
            })

  build-complete:
    needs: [get-version, build-binaries]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸ¤– Build is complete. You can find the artifacts here ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
            })

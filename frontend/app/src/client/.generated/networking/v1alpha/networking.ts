// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
//@ts-nocheck
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
//@ts-nocheck
/* eslint-disable */
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import _m0 from "protobufjs/minimal";

/**
 * Indicates connection status of our node with a remote peer.
 * Mimics libp2p connectedness.
 */
export enum ConnectionStatus {
  /** NOT_CONNECTED - NotConnected means no connection to peer, and no extra information (default). */
  NOT_CONNECTED,
  /** CONNECTED - Connected means has an open, live connection to peer. */
  CONNECTED,
  /** CAN_CONNECT - CanConnect means recently connected to peer, terminated gracefully. */
  CAN_CONNECT,
  /**
   * CANNOT_CONNECT - CannotConnect means recently attempted connecting but failed to connect.
   * (should signal "made effort, failed").
   */
  CANNOT_CONNECT,
  UNRECOGNIZED,
}

export function connectionStatusFromJSON(object: any): ConnectionStatus {
  switch (object) {
    case 0:
    case "NOT_CONNECTED":
      return ConnectionStatus.NOT_CONNECTED;
    case 1:
    case "CONNECTED":
      return ConnectionStatus.CONNECTED;
    case 2:
    case "CAN_CONNECT":
      return ConnectionStatus.CAN_CONNECT;
    case 3:
    case "CANNOT_CONNECT":
      return ConnectionStatus.CANNOT_CONNECT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ConnectionStatus.UNRECOGNIZED;
  }
}

export function connectionStatusToJSON(object: ConnectionStatus): string {
  switch (object) {
    case ConnectionStatus.NOT_CONNECTED:
      return "NOT_CONNECTED";
    case ConnectionStatus.CONNECTED:
      return "CONNECTED";
    case ConnectionStatus.CAN_CONNECT:
      return "CAN_CONNECT";
    case ConnectionStatus.CANNOT_CONNECT:
      return "CANNOT_CONNECT";
    case ConnectionStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Request to get peer's addresses. */
export interface GetPeerInfoRequest {
  /** Required. CID-encoded Peer ID. */
  peerId: string;
}

/** Request for connecting to a peer explicitly. */
export interface ConnectRequest {
  /**
   * A list of multiaddrs for the same peer ID to attempt p2p connection.
   * For example `/ip4/10.0.0.1/tcp/55000/p2p/QmDeadBeef`.
   */
  addrs: string[];
}

/** Response for conneting to a peer. */
export interface ConnectResponse {}

/** Various details about a known peer. */
export interface PeerInfo {
  /** List of known multiaddrs of the request peer. */
  addrs: string[];
  /** Connection status of our node with a remote peer. */
  connectionStatus: ConnectionStatus;
  /** Account ID that this peer is bound to. */
  accountId: string;
}

function createBaseGetPeerInfoRequest(): GetPeerInfoRequest {
  return { peerId: "" };
}

export const GetPeerInfoRequest = {
  encode(
    message: GetPeerInfoRequest,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    if (message.peerId !== "") {
      writer.uint32(10).string(message.peerId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPeerInfoRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPeerInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.peerId = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): GetPeerInfoRequest {
    return {
      peerId: isSet(object.peerId) ? String(object.peerId) : "",
    };
  },

  toJSON(message: GetPeerInfoRequest): unknown {
    const obj: any = {};
    message.peerId !== undefined && (obj.peerId = message.peerId);
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<GetPeerInfoRequest>, I>>(
    object: I
  ): GetPeerInfoRequest {
    const message = createBaseGetPeerInfoRequest();
    message.peerId = object.peerId ?? "";
    return message;
  },
};

function createBaseConnectRequest(): ConnectRequest {
  return { addrs: [] };
}

export const ConnectRequest = {
  encode(
    message: ConnectRequest,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    for (const v of message.addrs) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ConnectRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.addrs.push(reader.string());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): ConnectRequest {
    return {
      addrs: Array.isArray(object?.addrs)
        ? object.addrs.map((e: any) => String(e))
        : [],
    };
  },

  toJSON(message: ConnectRequest): unknown {
    const obj: any = {};
    if (message.addrs) {
      obj.addrs = message.addrs.map((e) => e);
    } else {
      obj.addrs = [];
    }
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<ConnectRequest>, I>>(
    object: I
  ): ConnectRequest {
    const message = createBaseConnectRequest();
    message.addrs = object.addrs?.map((e) => e) || [];
    return message;
  },
};

function createBaseConnectResponse(): ConnectResponse {
  return {};
}

export const ConnectResponse = {
  encode(
    _: ConnectResponse,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ConnectResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(_: any): ConnectResponse {
    return {};
  },

  toJSON(_: ConnectResponse): unknown {
    const obj: any = {};
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<ConnectResponse>, I>>(
    _: I
  ): ConnectResponse {
    const message = createBaseConnectResponse();
    return message;
  },
};

function createBasePeerInfo(): PeerInfo {
  return { addrs: [], connectionStatus: 0, accountId: "" };
}

export const PeerInfo = {
  encode(
    message: PeerInfo,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    for (const v of message.addrs) {
      writer.uint32(10).string(v!);
    }
    if (message.connectionStatus !== 0) {
      writer.uint32(16).int32(message.connectionStatus);
    }
    if (message.accountId !== "") {
      writer.uint32(26).string(message.accountId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PeerInfo {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePeerInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.addrs.push(reader.string());
          break;
        case 2:
          message.connectionStatus = reader.int32() as any;
          break;
        case 3:
          message.accountId = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): PeerInfo {
    return {
      addrs: Array.isArray(object?.addrs)
        ? object.addrs.map((e: any) => String(e))
        : [],
      connectionStatus: isSet(object.connectionStatus)
        ? connectionStatusFromJSON(object.connectionStatus)
        : 0,
      accountId: isSet(object.accountId) ? String(object.accountId) : "",
    };
  },

  toJSON(message: PeerInfo): unknown {
    const obj: any = {};
    if (message.addrs) {
      obj.addrs = message.addrs.map((e) => e);
    } else {
      obj.addrs = [];
    }
    message.connectionStatus !== undefined &&
      (obj.connectionStatus = connectionStatusToJSON(message.connectionStatus));
    message.accountId !== undefined && (obj.accountId = message.accountId);
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<PeerInfo>, I>>(object: I): PeerInfo {
    const message = createBasePeerInfo();
    message.addrs = object.addrs?.map((e) => e) || [];
    message.connectionStatus = object.connectionStatus ?? 0;
    message.accountId = object.accountId ?? "";
    return message;
  },
};

/** Networking API service of the Mintter daemon. */
export interface Networking {
  /** Lookup details about a known peer. */
  getPeerInfo(
    request: DeepPartial<GetPeerInfoRequest>,
    metadata?: grpc.Metadata
  ): Promise<PeerInfo>;
  /** Establishes a direct connection with a given peer explicitly. */
  connect(
    request: DeepPartial<ConnectRequest>,
    metadata?: grpc.Metadata
  ): Promise<ConnectResponse>;
}

export class NetworkingClientImpl implements Networking {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.getPeerInfo = this.getPeerInfo.bind(this);
    this.connect = this.connect.bind(this);
  }

  getPeerInfo(
    request: DeepPartial<GetPeerInfoRequest>,
    metadata?: grpc.Metadata
  ): Promise<PeerInfo> {
    return this.rpc.unary(
      NetworkingGetPeerInfoDesc,
      GetPeerInfoRequest.fromPartial(request),
      metadata
    );
  }

  connect(
    request: DeepPartial<ConnectRequest>,
    metadata?: grpc.Metadata
  ): Promise<ConnectResponse> {
    return this.rpc.unary(
      NetworkingConnectDesc,
      ConnectRequest.fromPartial(request),
      metadata
    );
  }
}

export const NetworkingDesc = {
  serviceName: "com.mintter.networking.v1alpha.Networking",
};

export const NetworkingGetPeerInfoDesc: UnaryMethodDefinitionish = {
  methodName: "GetPeerInfo",
  service: NetworkingDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetPeerInfoRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      return {
        ...PeerInfo.decode(data),
        toObject() {
          return this;
        },
      };
    },
  } as any,
};

export const NetworkingConnectDesc: UnaryMethodDefinitionish = {
  methodName: "Connect",
  service: NetworkingDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ConnectRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      return {
        ...ConnectResponse.decode(data),
        toObject() {
          return this;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR
  extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    }
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata =
      metadata && this.options.metadata
        ? new BrowserHeaders({
            ...this.options?.metadata.headersMap,
            ...metadata?.headersMap,
          })
        : metadata || this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata,
        transport: this.options.transport,
        debug: this.options.debug,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message);
          } else {
            const err = new Error(response.statusMessage) as any;
            err.code = response.status;
            err.metadata = response.trailers;
            reject(err);
          }
        },
      });
    });
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Array<infer U>
  ? Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string }
  ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & {
      $case: T["$case"];
    }
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<
        Exclude<keyof I, KeysOfUnion<P>>,
        never
      >;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
